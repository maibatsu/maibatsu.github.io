/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */progress,sub,sup{vertical-align:baseline}button,hr,input{overflow:visible}html,legend{box-sizing:border-box}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;color:#333;font-family:Roboto,sans-serif;font-size:1rem;font-weight:400;line-height:1.5}@media (max-width:500px){html{font-size:.75rem}}@media (max-width:900px){html{font-size:1rem}}@media (min-width:1400px){html{font-size:1.2rem}}h1,h2,h3,h4,h5,h6,ol,p,ul{margin-top:0;margin-bottom:1rem}h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;color:#323232;font-family:"Roboto Slab",serif;font-weight:700;line-height:1.1}a[href*="t.me"],a[href*=github],a[href^=tel],a[href^=mailto],a[href^=http]{position:relative;padding-left:1em;transition:all .3s cubic-bezier(.25,.8,.25,1)}a[href*="t.me"]:not(.contacts__item),a[href*=github]:not(.contacts__item),a[href^=tel]:not(.contacts__item),a[href^=mailto]:not(.contacts__item),a[href^=http]:not(.contacts__item){color:#666}a[href*="t.me"]:not(.contacts__item):hover,a[href*=github]:not(.contacts__item):hover,a[href^=tel]:not(.contacts__item):hover,a[href^=mailto]:not(.contacts__item):hover,a[href^=http]:not(.contacts__item):hover{color:#ff512f}header,header h1{color:#fff}a[href*="t.me"]:before,a[href*=github]:before,a[href^=tel]:before,a[href^=mailto]:before,a[href^=http]:before{position:absolute;left:0;display:block;content:"";background-repeat:no-repeat;background-position:0 0;background-size:contain}a[href*="t.me"]:not([href^=http]):not([href^=mailto]):not([href*=github]):before,a[href*=github]:not([href^=http]):not([href^=mailto]):not([href*=github]):before,a[href^=tel]:not([href^=http]):not([href^=mailto]):not([href*=github]):before,a[href^=mailto]:not([href^=http]):not([href^=mailto]):not([href*=github]):before,a[href^=http]:not([href^=http]):not([href^=mailto]):not([href*=github]):before{top:.4em}a[href^=http]:before{top:.55em;width:.65em;height:.65em;background-image:url(../img/icon-link-external.svg)}a[href*="t.me"]:before,a[href*=github]:before,a[href^=tel]:before,a[href^=mailto]:before{top:.38em;width:.8em;height:.8em}a[href^=mailto]:before{top:.47em;background-image:url(../img/e-mail-envelope.svg)}a[href^=tel]:before{background-image:url(../img/phone-receiver.svg)}a[href*=github]:before{background-image:url(../img/github.svg)}a[href*="t.me"]:before{background-image:url(../img/telegram-logo.svg)}header{padding:1rem 0;background:#ff512f;background:linear-gradient(to right,#ff512f,#dd2476);box-shadow:0 3rem 5rem -2rem rgba(0,0,0,.2)}.avatar{width:150px;height:150px;margin:auto auto 1em;border-radius:50%;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center}.avatar img{width:100%;border-radius:50%;box-shadow:0 0 13px #333}@media (max-width:500px){.avatar{width:100px;height:100px}}@media (max-width:800px){.avatar{width:120px;height:120px;margin-bottom:1em}}.contacts{display:-webkit-flex;display:-ms-flexbox;display:flex;margin:2.3em 0 1em;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center}.work__item,.work__picture{display:-webkit-flex;display:-ms-flexbox}.contacts__item{margin:0 1em;text-decoration:none;color:#fff}.contacts__item:hover{text-decoration:underline}@media (max-width:700px){.contacts{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column}.contacts__item{margin:.5em 0}}.work{padding:2em 0}.work>h2{margin-bottom:1em}.work__item{display:flex;margin-bottom:1.5rem;padding:1rem;transition:box-shadow .3s cubic-bezier(.25,.8,.25,1);color:#666;background-color:#fff;box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24)}.work__item:focus,.work__item:hover{color:#444;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}.work__picture{display:flex;max-width:250px;height:200px}.work__picture img{max-width:250px;height:auto;margin:auto}.work__body{display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding-left:1.5rem;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center}@media (max-width:500px){.work{padding:1rem 0}.work__item{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;color:#444}.work__picture{display:none}.work__body{padding-left:0}}@media (min-width:500px) and (max-width:700px){.work__item{padding:1.5em}.work__picture{display:none}.work__body{padding-left:0}}@media (max-width:800px){.work{padding:1.5rem 0}}html{background-color:#f3f3f3}*,:after,:before{box-sizing:inherit}.container{width:90%;margin-right:auto;margin-left:auto}@media only screen and (min-width:33.75em){.container{width:80%}}@media only screen and (min-width:60em){.container{width:75%;max-width:60rem}}
/*# sourceMappingURL=data:application/json;base64, */
